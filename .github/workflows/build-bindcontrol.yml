# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build & Test Application

on:
  push:
    branches: [ "main", "feature/*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: Build, Test & Package
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Cache pip dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Tools & Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04 wxPython --user
          pip install pyinstaller flake8 pytest -r requirements.txt
      # disable for now
      #    - name: Lint with flake8
      #      run: |
      #        # stop the build if there are Python syntax errors or undefined names
      #        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # Can be enabled later and used to run tests
      #    - name: Test with pytest
      #      run: |
      #        pytest
      #    - name: Package Application
      #      uses: JackMcKew/pyinstaller-action-windows@main
      #      with:
      #        path: .
      - name: Create Installers
        run: |
          echo "1.0.0-beta" > version.txt
          
          pyinstaller -i icons/BindControl.ico --noconsole --noconfirm --clean --add-data icons:icons --add-data Help:Help --add-data version.txt:. --exclude-module _bz2 --exclude-module _ctypes --exclude-module _decimal --exclude-module _hashlib --exclude-module _lzma --exclude-module _socket --exclude-module _ssl BindControl.py

      - name: Verify Build (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          ls -la dist/BindControl

      - name: Verify Build (Windows)
        if: runner.os == 'Windows'
        run: |
          dir dist/BindControl

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: BindControl-1.0.0-beta-${{ runner.os }}
          path: dist/BindControl/*

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
#          tag_name: ${{ github.ref }}
          tag_name: 1.0.0-beta
#          release_name: Release ${{ github.ref }}
          release_name: Release 1.0.0-beta
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/BindControl/BindControl-1.0.0-beta-${{ runner.os }}.zip
          asset_name: BindControl-1.0.0-beta-${{ runner.os }}.zip
          asset_content_type: application/zip