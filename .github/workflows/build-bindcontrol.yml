# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build & Test Application

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
#    branches: [ "main", "feature/*" ]
#  pull_request:
#    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      semver:
        description: 'Create Version. i.e 1.0.0-beta'
        required: true
        default: '1.0.0'
      label:
        description: 'Add Labels. i.e final, alpha, rc'
        required: false
        default: 'alpha'

jobs:
  Release:
    name: Create Release
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: 'Testing workflow dispatch: ${{ github.event.inputs.semver }}-${{ github.event.inputs.label }}'
          draft: false
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  Build:
    name: Build, Test & Package
    needs: Release
    strategy:
      fail-fast: false
      matrix:
#        os: [ ubuntu-latest, windows-latest ]
        include:
#          - os: macos-latest
#            TARGET: macos
#            CMD_BUILD: >
#              pyinstaller -F -w -n clipster -i resources/clipster.icns cli.py &&
#              cd dist/ &&
#              zip -r9 clipster clipster.app/
#            CMD_VERIFY:  ls -la dist/BindControl
#            OUT_FILE_NAME: clipster.zip
#            ASSET_MIME: application/zip
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller -i icons/BindControl.ico --noconsole --noconfirm --clean --add-data icons:icons --add-data Help:Help --add-data version.txt:. --exclude-module _bz2 --exclude-module _ctypes --exclude-module _decimal --exclude-module _hashlib --exclude-module _lzma --exclude-module _socket --exclude-module _ssl BindControl.py
            CMD_VERIFY:  dir dist/BindControl
            OUT_FILE_NAME: BindControl.zip
#            ASSET_MIME: application/vnd.microsoft.portable-executable
            ASSET_MIME: application/zip
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Tools & Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04 wxPython --user
          pip install pyinstaller -r requirements.txt
      # disable for now, add later for linting and testing
#          pip install pyinstaller flake8 pytest -r requirements.txt
      #    - name: Lint with flake8
      #      run: |
      #        # stop the build if there are Python syntax errors or undefined names
      #        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # Can be enabled later and used to run tests
      #    - name: Test with pytest
      #      run: |
      #        pytest
      #    - name: Package Application
      #      uses: JackMcKew/pyinstaller-action-windows@main
      #      with:
      #        path: .

      - name: Create Installers
        run: |
          echo "1.0.0-beta" > version.txt
          ${{ matrix.CMD_BUILD }}

      - name: Verify Build Artifacts
        run: |
          ${{ matrix.CMD_VERIFY }}

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.OUT_FILE_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}

#      - name: Upload Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: BindControl-1.0.0-beta-${{ runner.os }}
#          path: dist/BindControl/
#          compression-level: 1
#          overwrite: true

#      - name: Upload Release Asset
#        id: upload_release_asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GH_PAT}}
##          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./dist/BindControl/BindControl-1.0.0-beta-${{ runner.os }}.zip
#          asset_name: BindControl-1.0.0-beta-${{ runner.os }}.zip
#          asset_content_type: application/zip